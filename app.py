from flask import Flask
from flask import Flask, flash, redirect, render_template, request, session, abort
from lib.models import Admin, DeviceOwner, Credentials, DeviceScanner, DatabaseHandler
from lib import mail
from lib.utils import getLast15Dates
import os
import threading
import time



app = Flask(__name__)
host='0.0.0.0'
# Bootstrap(app)
loginCount = 0
toDisplay = []

@app.route("/graph")
def showGraph():
    if session.get('logged_in'):
        labels = getLast15Dates()
        db = DatabaseHandler()
        values = []
        for date in labels:
            values.append(db.getScanResultsVulnerableCountForDate(date))
  
        # db = DatabaseHandler()
        # values = db.scanVulFromDB()
        # print(values[0]) # if the oldest scan's first item - vulnerable or not.
        

        # print(values)
        # scanlist = []
        # for value in values:
            # scanlist.append(value.Vulnerable)
        # print(scanlist[0])
        return render_template('graph.html', values=values, labels=labels)
    else:
        return redirect("/")    


@app.route("/")
def index():
    if not session.get('logged_in'):
        if(loginCount < 3):
            return render_template('login.html', loginFailed = False)
        else: 
            return render_template('retry.html')
    else:
        # print(myPort)
        # verifyResult = protocolScanner.verifyCredentials( Credentials('admin', 'password'))
        return render_template('dashboard.html' , addDeviceToggle = False, deleteDeviceToggle = False)

@app.route('/login', methods=['POST','GET'])
def do_admin_login():
    global loginCount
    if loginCount<3 :
        if admin.verifyCredentials(Credentials(request.form['username'],request.form['password'])):
            session['logged_in'] = True
            loginCount = 0
            return redirect("/")
        else:
            loginCount = loginCount + 1
            if loginCount<3:
                # flash('wrong password!')
                return render_template('login.html', loginFailed = True, retryOverflow = False)
            else:
                # loginCount = 0
                return render_template('retry.html')
    else: 
    #     # wait for 10 seconds.
    #     waitLock(5);
        # loginCount = 0;
        return render_template('retry.html')

@app.route('/retryLogin', methods=['POST'])       
def lock_ten_sec():
    global loginCount
    # waitLock(10)
    if(waitLock(10)):
    	waitLock(10)
    loginCount = 0;
    return render_template('login.html', loginFailed = False, retryOverflow = False)

@app.route("/about")
def show_about():
    return render_template('about.html')    
@app.route("/logout")
def logout():
    session['logged_in'] = False
    return redirect("/")

@app.route("/addDeviceToggle", methods = ['GET'])
def showAddDevice():
    if session.get('logged_in'):
      return render_template('addNewCred.html' , addDeviceToggle = True, deleteDeviceToggle = False)
    else:
        return redirect("/")

@app.route("/deleteDeviceToggle", methods = ['GET'])
def showDeleteDevice():
    if session.get('logged_in'):
        return render_template('deleteCred.html' , addDeviceToggle = False, deleteDeviceToggle = True)
    else:
        return redirect("/")    

@app.route("/scanresults",  methods=['POST'])
def display_scan_results():

    if session.get('logged_in'):
        ds = DeviceScanner()

        toDisplay = ds.scanRange(request.form['start_ip'], request.form['end_ip'])
        print(toDisplay)
        if toDisplay == "invalidIP":
            return render_template('dashboard.html', invalidIP = True) 
        
        else:
           mail_page = render_template('mailer.html', toDisplay = toDisplay)
           #inserted yash's email ID as admin
           #need a list of admins later, to be loaded from the admin db
           #device owners to be handled
           mail.sendMessage(["xyz@gmail.com"], mail_page)

           return render_template('scanresults.html', toDisplay = toDisplay)
           # will also pass the scan results object into this template.
    else:
        return redirect("/")


@app.route("/register", methods=['GET'])
def registerDisplay():
    global session
    if session.get('logged_in'):
        return render_template('register.html')
    else:
        # session['logged_in'] = False
        return redirect("/logout")
        # return redirect("/logout")

@app.route("/registerAdmin", methods=['POST'])
def registerAdmin():
    global session
    if session.get('logged_in'):
        # return redirect("/")
        #  try to register admin
        #  1. take username, password and email from form.
        new_admin = Admin(request.form['username'],request.form['email'],Credentials(request.form['username'], request.form['password']))
        #  2. try adding it to db.
        try:
            db = DatabaseHandler()
            db.insertNewAdmin(new_admin)
            return render_template("/addedAdmin.html")
        except:
            return "Registration Failed..."
        #  3. display success/failure message.
    else:
        return redirect("/logout")    


@app.route("/viewcredentials",  methods=['GET'])
def display_credentials():

    if session.get('logged_in'):
        db = DatabaseHandler()
        toDisplay = db.credentialsFromDB()
        return render_template('viewcredentials.html', toDisplay = toDisplay)
    else:
        return redirect("/")

@app.route("/viewscanhistory",  methods=['GET'])
def view_scan_history():

    if session.get('logged_in'):
        db = DatabaseHandler()
        toDisplay = db.scanResultsFromDB()
        return render_template('viewscanhistory.html', toDisplay = toDisplay)
    else:
        return redirect("/")

@app.route("/notifyuser", methods=['POST'])
def notifyUser():
    if session.get('logged_in'):
    # call notify user from service layer.
    #implement client side error handling.
        flash('Device Owner Notified!...')
        return render_template('dashboard.html', addDeviceToggle = False)
    else:
        return redirect("/")
@app.route("/addNewDevice", methods=['POST'])
def addNewDevice():
    #handle exceptions and return appropriate message
    #call add new device method of service layer.
    #
    if session.get('logged_in'):
        db = DatabaseHandler()
        db.insertIntoDefaultCredentials(request.form['username'], request.form['password'])
        return render_template('addNewCred.html' , addDeviceToggle = False, deleteDeviceToggle = False, addedDevice = True)
    else:
        return redirect("/")

@app.route("/deleteDevice", methods=['POST'])
def deleteDevice():
    #handle exceptions and return appropriate message
    #call add new device method of service layer.
    #
    if session.get('logged_in'):
        db = DatabaseHandler()
        db.deleteFromDefaultCredentials(request.form['username'], request.form['password'])
        return render_template('deleteCred.html' , addDeviceToggle = False, deleteDeviceToggle = False, deletedDevice = True)
    else:
        return redirect("/")


lock = threading.Lock()
cond = threading.Condition(threading.Lock())

def waitLock(timeout):
    with cond:
        current_time = start_time = time.time()
        while current_time < start_time + timeout:
            if lock.acquire(False):
                return True
            else:
                cond.wait(timeout - current_time + start_time)
                current_time = time.time()
    return False


if __name__ == "__main__":
    loginFailed = False
    loginCount = 0
    retryOverflow = False
    admin = Admin("admin name","admin email",Credentials("admin","password"))
    # protocolScanner = ProtocolScanner("Kunal Protocol" , "9997", "Kunal Host" )
    # myPort = protocolScanner.getPortNumber()
    app.secret_key = os.urandom(12)
    app.run(debug=True,host=host, port=2200)
    # create_app()
