from .utils import *

from werkzeug.security import generate_password_hash, check_password_hash
import ipaddress

from sqlalchemy import *
from .scanners.scanner import ProtocolScanner
from .scanners.ssh import SSHScanner
from .scanners.ftp import FTPScanner
from .scanners.telnet import TelnetScanner
import socket
import time

DEBUG = False

class Person():

	def __init__(self, name, emailID):
		self.name = name
		self.emailID = emailID

	def getEmail(self):
		return self.emailID
	def getName(self):
		return self.name

class DeviceOwner(Person):

	def __init__(self, name, emailID):
		Person.__init__(self, name, emailID)
		# initializing empty list for iot devices
		self.IoTDevices = []
	def getDevices():
		return self.IoTDevices    
 
class Admin(Person):

	def __init__(self, name, emailID,credential):
		Person.__init__(self, name, emailID)
		self.credential = credential
		self.IoTDevices = []
		self.db = DatabaseHandler()

	def verifyCredentials(self,cred):
		return self.db.verifyAdminCredentials(cred)

	def getCredential(self):
		return self.credential

class Credentials():

	def __init__(self, username, password):
		self.username = username
		self.password = password

	def getUsername(self):
		return self.username
	def getPassword(self):
		return self.password

class ScanResults():

	def __init__(self, Timestamp, Vulnerable, IPAddress, Device, portNumber, protocolName, os, arch):
		self.Timestamp = Timestamp
		self.Vulnerable = Vulnerable
		self.IPAddress = IPAddress
		self.Device = Device
		self.portNumber = portNumber
		self.protocolName = protocolName
		self.os = os
		self.arch = arch

	def getUsername(self):
		return self.username
	def getPassword(self):
		return self.password

class IoTDevice():
	def __init__(self, deviceModel, deviceName, IPAddress, MACAddr, credentials, protocols, deviceOwner):
		self.deviceModel = deviceModel
		self.deviceName = deviceName
		self.IPAddress = IPAddress
		self.MACAddr = MACAddr
		self.credentials = credentials
		self.protocols = protocols
		self.deviceOwner = deviceOwner

	def verifyCredentials(self, protocolScanner):
		if protocolScanner.fingerprint() == 0:
			# some mechanism by which we get deviceModel -> protocol -> List<defaultCredentials>
			return protocolScanner.verifyCredentials(credentials)
		return False


class DeviceScanner():
	def __init__(self):
		self.admin = Admin("admin name","admin email",Credentials("admin","password"))
		self.scanResults = []
		self.db = DatabaseHandler()

	def scanRange(self, startIP, endIP):
		try:
			start_IP = ipaddress.IPv4Address(startIP)
			end_IP = ipaddress.IPv4Address(endIP)
		except:
			return "invalidIP"

		start_IP = ipaddress.IPv4Address(startIP)
		end_IP = ipaddress.IPv4Address(endIP)
		if start_IP>end_IP:
			return "invalidIP"
		for IPAddress in range(int(start_IP), int(end_IP+1)):
			IPAddress = str(ipaddress.IPv4Address(IPAddress))
			try:
				socket.gethostbyaddr(IPAddress)
				res = self.attemptLogin(IPAddress)
			except socket.herror:
				# Display in ScanResults only maybe?
				print ("Unknown host {0}".format(IPAddress))
			if DEBUG:
				print(res)
		return self.scanResults
		
			
	def attemptLogin(self, IPAddress): #Device model (may) will be also a parameter
		# attempts login for various protocols
		protocols = ["SSH", "FTP", "telnet"]
		for protocol in protocols:
			if DEBUG:
				print(IPAddress, protocol)
			
			if ProtocolScanner(protocol, getPort(protocol), IPAddress).fingerprint()!=0:
				currentResult = {
						"vulnerable" : "Port Closed",
						"timestamp" : str(currentTime()),
						"ip" : IPAddress,
						"port" : getPort(protocol),
						"protocol" : protocol,
						"os" : "NA",
						"arch" : "NA",
						"device" : "NA",
					}
				self.scanResults.append(currentResult)
				print(currentResult)
				continue
			protocolScanner = globals()[protocol+"Scanner"](protocol, getPort(protocol), IPAddress)
			#fetch cred from DB, extensions.py has the insert statement right now
			creds = self.db.credentialsFromDB()
			#checking all username and passwords in DB
			detected = False
			for cred in creds:
				scanResult = protocolScanner.verifyCredentials(cred)
				curTime = currentTime()
				try:
					parsedEvidence = parseEvidence(scanResult)
					currentResult = {
						"vulnerable" : "Yes",
						"timestamp" : str(curTime),
						"ip" : IPAddress,
						"port" : getPort(protocol),
						"protocol" : protocol,
						"os" : parsedEvidence["os"][0],
						"arch" : parsedEvidence["arch"][0],
						"device" : parsedEvidence["dev"]
					}
					detected = True
					self.db.insertIntoScanResults(curTime, "Yes", IPAddress, parsedEvidence["dev"], getPort(protocol), protocol, parsedEvidence["os"][0], parsedEvidence["arch"][0])
					self.scanResults.append(currentResult)
					print(currentResult)
				except:
					continue
			if detected is False:
				currentResult = {
					"vulnerable" : "No",
					"timestamp" : str(curTime),
					"ip" : IPAddress,
					"port" : getPort(protocol),
					"protocol" : protocol,
					"os" : "NA",
					"arch" : "NA",
					"device" : "NA"
				}
				self.db.insertIntoScanResults(curTime, "No", IPAddress, "NA", getPort(protocol), protocol, None, None)
				print(currentResult)
				self.scanResults.append(currentResult)

	def displayScanResuts(self):
		#Display scan results
		print(self.scanResults)
		return None

class DatabaseHandler():
	def __init__(self):
		self.db = create_engine('sqlite:///iot.db')
		self.db.echo = False 
		
	
	def credentialsFromDB(self):
		metadata = MetaData(self.db)
		credentials = Table('Credentials', metadata, autoload = True)
		s = credentials.select()
		rs = s.execute()
		rows  = rs.fetchall() 
		creds = []
		for row in rows:
			cred = Credentials(row.username,row.password)
			creds.append(cred)
		return creds

	def getScanResultsForDate(self,date):
		metadata = MetaData(self.db)
		scan_results = Table('ScanResults', metadata, autoload = True)
		entities = scan_results.select()
		rows = entities.execute().fetchall()
		scanResults = []
		for row in rows:
			if row.Timestamp.count(date) > 0:
				scanResult = ScanResults(row.Timestamp,row.Vulnerable,row.IPAddress,row.Device,row.portNumber,row.protocolName,row.os,row.arch)
				scanResults.append(scanResult)

		return scanResults

	def getScanResultsVulnerableCountForDate(self,date):
		metadata = MetaData(self.db)
		scan_results = Table('ScanResults', metadata, autoload = True)
		entities = scan_results.select()
		rows = entities.execute().fetchall()
		count = 0
		for row in rows:
			if row.Timestamp.count(date) > 0 and row.Vulnerable == "Yes":
				count+=1

		return count


	def scanResultsFromDB(self):
		metadata = MetaData(self.db)
		scanRes = Table('ScanResults', metadata, autoload = True)
		s = scanRes.select()
		rs = s.execute()
		rows  = reversed(rs.fetchall()) #whats the query?
		scanResults = []
		for row in rows:
			scanResult = ScanResults(row.Timestamp,row.Vulnerable,row.IPAddress,row.Device,row.portNumber,row.protocolName,row.os,row.arch)
			scanResults.append(scanResult)
		return scanResults

	def scanVulFromDB(self):
		metadata = MetaData(self.db)
		scanRes = Table('ScanResults', metadata, autoload = True)
		s = scanRes.select()
		rs = s.execute()
		rows  = rs.fetchall() #whats the query?
		scanResults = []
		for row in rows:
			scanResult = ScanResults(row.Timestamp,row.Vulnerable,row.IPAddress,row.Device,row.portNumber,row.protocolName,row.os,row.arch)
			if(scanResult.Vulnerable == "No"):
				scanResults.append(0)
			else:
				scanResults.append(1)	
		return scanResults
	
	def insertIntoDefaultCredentials(self, username, password):
		metadata = MetaData(self.db)
		credentials = Table('Credentials', metadata, autoload = True)
		insert_cred = credentials.insert()
		insert_cred.execute(username = username, password = password)
		return None
		
	def deleteFromDefaultCredentials(self, username, password):
		metadata = MetaData(self.db)
		credentials = Table('Credentials', metadata, autoload = True)
		delete_cred = credentials.delete().where(and_(credentials.c.username == username, credentials.c.password == password))
		delete_cred.execute()
		return None
		
	def insertIntoScanResults(self, time, vulnerable, IPAddress, device, portNumber, protocolName, os, arch):
		metadata = MetaData(self.db)
		scan_results = Table('ScanResults', metadata, autoload = True)
		insert_scan_results = scan_results.insert()
		#Linux raspberrypi 4.14.69+ #1141 Mon Sep 10 15:13:50 BST 2018 armv6l GNU/Linux
		insert_scan_results.execute(Timestamp = time, Vulnerable = vulnerable, IPAddress = IPAddress, Device = device, portNumber = portNumber, protocolName = protocolName, os = os, arch = arch)
		return None
		
	def deleteFromScanResults(self, username, password):
		metadata = MetaData(self.db)
		scan_results = Table('ScanResults', metadata, autoload = True)
		delete_scan_results = scan_results.delete() #What's the deletion condition?
		delete_scan_results.execute()
		return None

	def insertNewAdmin(self, admin):
		metadata = MetaData(self.db)
		credentials = Table('AdminCredentials', metadata, autoload = True)
		insert_cred = credentials.insert()
		cred = admin.getCredential()
		insert_cred.execute(username = cred.getUsername(), password = cred.getPassword(), emailID = admin.emailID)
		return "Admin Added"
		
	def verifyAdminCredentials(self, cred):
		metadata = MetaData(self.db)
		credentials = Table('AdminCredentials', metadata, autoload = True)
		rows = credentials.select().execute().fetchall()
		for row in rows:
			if row.username == cred.getUsername() and row.password == cred.getPassword():
				return True			
		return False

	def deleteFromScanResultsDateWise(self,date):
		metadata = MetaData(self.db)
		scan_results = Table('ScanResults', metadata, autoload = True)
		select_results = scan_results.select().execute().fetchall()
		for row in select_results:
			try:
				time_before = time.strptime(row.Timestamp, '%b %d %Y %I:%M:%S')
				time_compare = time.strptime(date + ' 12:00:00', '%b %d %Y %I:%M:%S')
				print(time_compare)
				if time_before < time_compare:
					delete_scan_results = scan_results.delete(scan_results.c.Timestamp == row.Timestamp) #What's the deletion condition?
					delete_scan_results.execute()
			except:
				continue
		return None
		
		
# ds = DeviceScanner()
# ds.scanRange("169.254.201.5", "169.254.201.7")
# ds.attemptLogin("169.254.201.6")
#db = DatabaseHandler()
#db.deleteFromScanResultsDateWise('Sep 30 2018')


